{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///S:/Projects/polling-next/polling-next/lib/PollService.tsx"],"sourcesContent":["// lib/api.ts\r\n\r\nexport interface Poll {\r\n    id: string;\r\n    question: string;\r\n    maxResponseOptions: string;\r\n    options: PollOption[];  \r\n}\r\n\r\nexport interface PollOption {\r\n    id: string;\r\n    isChecked: boolean;\r\n    name: string;\r\n    votes: number;  \r\n}\r\n\r\nexport interface CreatePollRequest {\r\n    question: string;\r\n    maxResponseOptions: string;\r\n    options: PollOption[];\r\n}\r\n\r\nexport interface PollResponse {\r\n    alreadySubmitted: boolean;\r\n    selectedOptions: string[];\r\n    poll: Poll;\r\n}\r\n\r\nexport async function createPoll(data: CreatePollRequest) {\r\n    const response = await fetch('http://localhost:5194/createPoll', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(data),\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Failed to create poll');\r\n    }\r\n  \r\n    return await response.json();\r\n}\r\n\r\nexport async function getPoll(pollId: number) : Promise<PollResponse> {\r\n    const response = await fetch(`http://localhost:5194/getPoll/${pollId}/${sessionStorage.getItem('pollUserId')}`, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Failed to create poll');\r\n    }\r\n  \r\n    return await response.json();\r\n}\r\n\r\nexport async function getPolls() : Promise<Poll[]> {\r\n    const response = await fetch(`http://localhost:5194/getPolls`, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Failed to create poll');\r\n    }\r\n  \r\n    return await response.json();\r\n}\r\n\r\nexport async function submitPoll(data: any) {\r\n    const response = await fetch(`http://localhost:5194/submitPoll/${sessionStorage.getItem('pollUserId')}`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(data)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Failed to submit poll');\r\n    }\r\n  \r\n    return await response.json();\r\n}"],"names":[],"mappings":"AAAA,aAAa;;;;;;;AA4BN,eAAe,WAAW,IAAuB;IACpD,MAAM,WAAW,MAAM,MAAM,oCAAoC;QAC/D,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;QAC9C,MAAM,KAAK,SAAS,CAAC;IACvB;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,MAAM,SAAS,IAAI;AAC9B;AAEO,eAAe,QAAQ,MAAc;IACxC,MAAM,WAAW,MAAM,MAAM,CAAC,8BAA8B,EAAE,OAAO,CAAC,EAAE,eAAe,OAAO,CAAC,eAAe,EAAE;QAC9G,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;IAChD;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,MAAM,SAAS,IAAI;AAC9B;AAEO,eAAe;IAClB,MAAM,WAAW,MAAM,MAAM,CAAC,8BAA8B,CAAC,EAAE;QAC7D,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;IAChD;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,MAAM,SAAS,IAAI;AAC9B;AAEO,eAAe,WAAW,IAAS;IACtC,MAAM,WAAW,MAAM,MAAM,CAAC,iCAAiC,EAAE,eAAe,OAAO,CAAC,eAAe,EAAE;QACvG,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;QAC9C,MAAM,KAAK,SAAS,CAAC;IACvB;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,MAAM,SAAS,IAAI;AAC9B","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///S:/Projects/polling-next/polling-next/components/CreatePollForm.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { createPoll, PollOption } from '@/lib/PollService';\r\nimport { useState } from 'react';\r\n\r\nexport default function CreatePollForm() {\r\n  const [question, setQuestion] = useState('');\r\n  const [responseCount, setResponseCount] = useState('1');\r\n  const [option, setOption] = useState<PollOption>({name: '', votes: 0, id: '0', isChecked: false});\r\n  const [options, setOptions] = useState<PollOption[]>([]);\r\n  const [message, setMessage] = useState(''); \r\n\r\n  const setDefaultValues = () => {\r\n    setQuestion('');\r\n    setOption({name: '', votes: 0, id: '0', isChecked: false});\r\n    setResponseCount('1');\r\n    setOptions([]);\r\n  }\r\n\r\n  const showMessage = (message: string) => {\r\n    setMessage(message);\r\n\r\n    setTimeout(() => {\r\n      setMessage('');\r\n    }, 3000);\r\n  }\r\n\r\n  const handleAddItem = () => {\r\n    if (!option || !option.name.trim()) return;\r\n\r\n    setOptions([...options,  option ]);\r\n\r\n    setOption({name: '', votes: 0, id: '0', isChecked: false})\r\n  };\r\n\r\n  const handleCreatePoll = async () => {\r\n    if (!question || options.some(opt => !opt.name.trim())) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await createPoll({\r\n        question,\r\n        maxResponseOptions: responseCount,\r\n        options: options,\r\n      });\r\n      console.log('Created poll:', response);\r\n\r\n      setDefaultValues();\r\n\r\n      showMessage(`Poll with id ${response} created successfully!`)\r\n    } catch (error: any) {\r\n      console.error(error);\r\n      showMessage('Failed to create poll.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-md mx-auto p-4\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">Add Item</h1>\r\n      <div className=\"space-y-2\">\r\n        <label>Question</label>\r\n        <input\r\n          className=\"w-full p-2 border rounded\"\r\n          placeholder=\"Question\"\r\n          value={question}\r\n          onChange={(e) => setQuestion(e.target.value)}\r\n        />\r\n\r\n        <label>Response Count</label>\r\n        <input\r\n          className=\"w-full p-2 border rounded\"\r\n          placeholder=\"Response Count\"\r\n          type='number'\r\n          min={1}\r\n          value={responseCount}\r\n          onChange={(e) => setResponseCount(e.target.value)}\r\n        />\r\n\r\n        <label>Options</label>\r\n        <input\r\n          className=\"w-full p-2 border rounded\"\r\n          placeholder=\"Add Option\"\r\n          value={option.name}\r\n          onChange={(e) => setOption({...option, name: e.target.value})}\r\n          onKeyDown={(e) => {\r\n            if (e.key === 'Enter') {\r\n              e.preventDefault(); // optional: prevent form submission or default behavior\r\n              handleAddItem();\r\n            }\r\n          }}\r\n        />\r\n        <button\r\n          className=\"w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700\"\r\n          onClick={handleAddItem}\r\n        >\r\n          Add to List\r\n        </button>\r\n      </div>\r\n\r\n      <ul className=\"mt-6 space-y-2\">\r\n        {options.map((item, index) => (\r\n          <li key={index} className=\"p-2 bg-gray-100\">\r\n            {index+1} - {item.name}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <br></br>\r\n\r\n      <button\r\n          className=\"w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700\"\r\n          onClick={handleCreatePoll}\r\n        >\r\n          Create Poll\r\n        </button>\r\n\r\n        {message && (\r\n        <div className=\"mt-4 text-center text-sm font-semibold\">\r\n          <p className=\"text-green-500\">{message}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"sources":["file:///S:/Projects/polling-next/polling-next/app/poll/create/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport CreatePollForm from '@/components/CreatePollForm';\r\n\r\nexport default function HomePage() {\r\n  \r\n  return (\r\n    <CreatePollForm></CreatePollForm>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IAEtB,qBACE,8OAAC,6HAAA,CAAA,UAAc;;;;;AAEnB","debugId":null}}]
}