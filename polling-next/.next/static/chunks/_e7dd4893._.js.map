{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/mhmdal/Projects/polling-next/polling-next/lib/PollService.tsx"],"sourcesContent":["// lib/api.ts\n\nconst API_URL = 'http://localhost:5000';\n\nexport interface Poll {\n    id: string;\n    question: string;\n    maxResponseOptions: string;\n    options: PollOption[];\n    submissionCount: number;\n}\n\nexport interface PollOption {\n    id: string;\n    isChecked: boolean;\n    name: string;\n    votes: number;  \n}\n\nexport interface CreatePollRequest {\n    question: string;\n    maxResponseOptions: string;\n    options: PollOption[];\n}\n\nexport interface PollResponse {\n    alreadySubmitted: boolean;\n    selectedOptions: string[];\n    poll: Poll;\n}\n\nexport interface PollResultsResponse {\n    poll: Poll;\n    submissionCount: number;\n}\n\nexport async function createPoll(data: CreatePollRequest) {\n    const response = await fetch(`${API_URL}/createPoll`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    });\n  \n    if (!response.ok) {\n      throw new Error('Failed to create poll');\n    }\n  \n    return await response.json();\n}\n\nexport async function getPoll(pollId: number) : Promise<PollResponse> {\n    const response = await fetch(`${API_URL}/getPoll/${pollId}/${sessionStorage.getItem('pollUserId')}`, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    });\n  \n    if (!response.ok) {\n      throw new Error('Failed to create poll');\n    }\n  \n    return await response.json();\n}\n\nexport async function getPollResults(pollId: number) : Promise<PollResultsResponse> {\n    const response = await fetch(`${API_URL}/getPollResults/${pollId}`, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    });\n  \n    return await response.json();\n}\n\nexport async function getPolls() : Promise<Poll[]> {\n    const response = await fetch(`${API_URL}/getPolls`, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    });\n  \n    if (!response.ok) {\n      throw new Error('Failed to create poll');\n    }\n  \n    return await response.json();\n}\n\nexport async function submitPoll(data: any) {\n    const response = await fetch(`${API_URL}/submitPoll/${sessionStorage.getItem('pollUserId')}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data)\n    });\n  \n    if (!response.ok) {\n      throw new Error('Failed to submit poll');\n    }\n  \n    return await response.json();\n}"],"names":[],"mappings":"AAAA,aAAa;;;;;;;;AAEb,MAAM,UAAU;AAkCT,eAAe,WAAW,IAAuB;IACpD,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,WAAW,CAAC,EAAE;QACpD,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;QAC9C,MAAM,KAAK,SAAS,CAAC;IACvB;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,MAAM,SAAS,IAAI;AAC9B;AAEO,eAAe,QAAQ,MAAc;IACxC,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,SAAS,EAAE,OAAO,CAAC,EAAE,eAAe,OAAO,CAAC,eAAe,EAAE;QACnG,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;IAChD;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,MAAM,SAAS,IAAI;AAC9B;AAEO,eAAe,eAAe,MAAc;IAC/C,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,gBAAgB,EAAE,QAAQ,EAAE;QAClE,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;IAChD;IAEA,OAAO,MAAM,SAAS,IAAI;AAC9B;AAEO,eAAe;IAClB,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,SAAS,CAAC,EAAE;QAClD,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;IAChD;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,MAAM,SAAS,IAAI;AAC9B;AAEO,eAAe,WAAW,IAAS;IACtC,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,YAAY,EAAE,eAAe,OAAO,CAAC,eAAe,EAAE;QAC5F,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;QAC9C,MAAM,KAAK,SAAS,CAAC;IACvB;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,MAAM,SAAS,IAAI;AAC9B","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///home/mhmdal/Projects/polling-next/polling-next/components/PollListing.tsx"],"sourcesContent":["'use client';\n\nimport { createPoll, getPoll, getPolls, Poll, PollOption, submitPoll } from '@/lib/PollService';\nimport { useRouter } from 'next/navigation';\nimport { useEffect, useState } from 'react';\n\nexport default function PollListing() {\n  const [polls, setPolls] = useState<Poll[]>([]);\n  const [message, setMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [copyToast, setCopyToast] = useState(''); \n\n\n  const showMessage = (message: string) => {\n    setMessage(message);\n\n    setTimeout(() => {\n      setMessage('');\n    }, 3000);\n  }\n\n  useEffect(() => {\n    const fetchPolls = async () => {\n      try {\n        const response = await getPolls();\n        setPolls(response);\n      } catch (error: any) {\n        showMessage('Failed to load polls.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchPolls();\n\n    const interval = setInterval(() => {\n      // fetchPolls();\n    }, 5000); // 5000 ms = 5 seconds\n\n    // Cleanup the interval when the component unmounts or when dependencies change\n    return () => clearInterval(interval);\n\n  }, [])\n\n  const router = useRouter();\n\n  const navigateToPollSubmission = (item: Poll) => {\n    router.push(`/poll/submit/${item.id}`); // Navigate to submit page with poll ID\n  };\n\n  const copyToClipboard = (text: string, label: string) => {\n    navigator.clipboard.writeText(text).then(() => {\n      setCopyToast(`${label} copied to clipboard!`);\n      setTimeout(() => setCopyToast(''), 2000);\n    }).catch(() => {\n      setCopyToast('Failed to copy to clipboard');\n      setTimeout(() => setCopyToast(''), 2000);\n    });\n  };\n\n\n\n  return (\n    <div className=\"min-h-screen py-8\" style={{\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n      backgroundAttachment: 'fixed'\n    }}>\n      <div className=\"max-w-4xl mx-auto px-4\">\n        <div className=\"bg-white/95 backdrop-blur-sm rounded-xl shadow-lg border p-8\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">My Polls</h1>\n            <p className=\"text-gray-600\">Manage and view your created polls</p>\n          </div>\n\n          {isLoading ? (\n            <div className=\"flex flex-col items-center justify-center py-12\">\n              <svg className=\"animate-spin h-8 w-8 text-blue-600 mb-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n              </svg>\n              <p className=\"text-gray-600\">Loading polls...</p>\n            </div>\n          ) : polls.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"text-6xl mb-4\">ðŸ“Š</div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No polls created yet</h3>\n              <p className=\"text-gray-600 mb-6\">You haven't created any polls yet. Start by creating your first poll!</p>\n              <button\n                onClick={() => window.location.href = '/poll/create'}\n                className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors font-medium\"\n              >\n                Create Your First Poll\n              </button>\n            </div>\n          ) : (\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {polls.map((poll, index) => (\n                <div\n                  key={poll.id || index}\n                  className=\"group bg-white border border-gray-200 rounded-xl p-6 hover:shadow-lg hover:border-blue-300 transition-all duration-200\"\n                >\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-gray-900 mb-2 line-clamp-2\">\n                        {poll.question}\n                      </h3>\n                      <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n                        <span className=\"flex items-center gap-1\">\n                          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\n                          </svg>\n                          {poll.options?.length || 0} options\n                        </span>\n                        <span className=\"flex items-center gap-1\">\n                          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z\" />\n                          </svg>\n                          {poll.submissionCount || 0} submissions\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex gap-2\">\n                    <button\n                      onClick={() => router.push(`/poll/results/${poll.id}`)}\n                      className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors font-medium text-sm\"\n                    >\n                      View Results\n                    </button>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        const url = `${window.location.origin}/poll/submit/${poll.id}`;\n                        copyToClipboard(url, 'Share link');\n                      }}\n                      className=\"px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors font-medium text-sm\"\n                      title=\"Copy share link\"\n                    >\n                      Share\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {/* Error Message */}\n          {message && (\n            <div className=\"mt-6 p-4 rounded-lg bg-red-50 border border-red-200\">\n              <p className=\"text-center font-medium text-red-800\">{message}</p>\n            </div>\n          )}\n\n          {/* Create New Poll Button */}\n          {polls.length > 0 && (\n            <div className=\"mt-8 pt-6 border-t text-center\">\n              <button\n                onClick={() => window.location.href = '/poll/create'}\n                className=\"px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all duration-200 font-medium shadow-md hover:shadow-lg\"\n              >\n                Create Another Poll\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Copy Toast Notification */}\n      {copyToast && (\n        <div className=\"fixed bottom-4 right-4 bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg z-50 animate-in slide-in-from-bottom-2 fade-in duration-200\">\n          <div className=\"flex items-center gap-2\">\n            <svg className=\"w-4 h-4 text-green-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n            </svg>\n            {copyToast}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 521, "column": 0}, "map": {"version":3,"sources":["file:///home/mhmdal/Projects/polling-next/polling-next/app/poll/page.tsx"],"sourcesContent":["'use client';\n\nimport PollListing from '@/components/PollListing';\n\nexport default function HomePage() {\n  \n  return (\n    <PollListing></PollListing>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IAEtB,qBACE,6LAAC,6HAAA,CAAA,UAAW;;;;;AAEhB;KALwB","debugId":null}}]
}