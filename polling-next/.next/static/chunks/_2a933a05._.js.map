{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///S:/Projects/polling-next/polling-next/lib/PollService.tsx"],"sourcesContent":["// lib/api.ts\r\n\r\nexport interface Poll {\r\n    id: string;\r\n    question: string;\r\n    maxResponseOptions: string;\r\n    options: PollOption[];  \r\n}\r\n\r\nexport interface PollOption {\r\n    id: string;\r\n    isChecked: boolean;\r\n    name: string;\r\n    votes: number;  \r\n}\r\n\r\nexport interface CreatePollRequest {\r\n    question: string;\r\n    maxResponseOptions: string;\r\n    options: PollOption[];\r\n}\r\n\r\nexport interface PollResponse {\r\n    alreadySubmitted: boolean;\r\n    poll: Poll;\r\n}\r\n\r\nexport async function createPoll(data: CreatePollRequest) {\r\n    const response = await fetch('http://localhost:5194/createPoll', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(data),\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Failed to create poll');\r\n    }\r\n  \r\n    return await response.json();\r\n}\r\n\r\nexport async function getPoll(pollId: number) : Promise<PollResponse> {\r\n    const response = await fetch(`http://localhost:5194/getPoll/${pollId}/${sessionStorage.getItem('pollUserId')}`, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Failed to create poll');\r\n    }\r\n  \r\n    return await response.json();\r\n}\r\n\r\nexport async function getPolls() : Promise<Poll[]> {\r\n    const response = await fetch(`http://localhost:5194/getPolls`, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Failed to create poll');\r\n    }\r\n  \r\n    return await response.json();\r\n}\r\n\r\nexport async function submitPoll(data: any) {\r\n    const response = await fetch(`http://localhost:5194/submitPoll/${sessionStorage.getItem('pollUserId')}`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(data)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Failed to submit poll');\r\n    }\r\n  \r\n    return await response.json();\r\n}"],"names":[],"mappings":"AAAA,aAAa;;;;;;;AA2BN,eAAe,WAAW,IAAuB;IACpD,MAAM,WAAW,MAAM,MAAM,oCAAoC;QAC/D,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;QAC9C,MAAM,KAAK,SAAS,CAAC;IACvB;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,MAAM,SAAS,IAAI;AAC9B;AAEO,eAAe,QAAQ,MAAc;IACxC,MAAM,WAAW,MAAM,MAAM,CAAC,8BAA8B,EAAE,OAAO,CAAC,EAAE,eAAe,OAAO,CAAC,eAAe,EAAE;QAC9G,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;IAChD;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,MAAM,SAAS,IAAI;AAC9B;AAEO,eAAe;IAClB,MAAM,WAAW,MAAM,MAAM,CAAC,8BAA8B,CAAC,EAAE;QAC7D,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;IAChD;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,MAAM,SAAS,IAAI;AAC9B;AAEO,eAAe,WAAW,IAAS;IACtC,MAAM,WAAW,MAAM,MAAM,CAAC,iCAAiC,EAAE,eAAe,OAAO,CAAC,eAAe,EAAE;QACvG,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;QAC9C,MAAM,KAAK,SAAS,CAAC;IACvB;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,MAAM,SAAS,IAAI;AAC9B","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///S:/Projects/polling-next/polling-next/components/SubmitPollForm.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { createPoll, getPoll, Poll, PollOption, submitPoll } from '@/lib/PollService';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport default function SubmitPollForm({ pollId }: {pollId: number}) {\r\n  const [question, setQuestion] = useState('');\r\n  const [options, setOptions] = useState<PollOption[]>([{ id: '1', votes: 0, name: 'potato', isChecked: false}]);\r\n  const [maxResponseOptions, setMaxResponseOptions] = useState('1');\r\n  const [viewMode, setViewMode] = useState(false);\r\n  const [message, setMessage] = useState(''); \r\n  const [reloadTrigger, setReloadTrigger] = useState(false); \r\n\r\n  const setDefaultValues = () => {\r\n    setQuestion('');\r\n    setMaxResponseOptions('');\r\n    setOptions([]);\r\n  }\r\n\r\n  const setPoll = (poll: Poll) => {\r\n    setQuestion(poll.question)\r\n    setOptions(poll.options)\r\n    setMaxResponseOptions(poll.maxResponseOptions)\r\n  };\r\n\r\n  const showMessage = (message: string) => {\r\n    setMessage(message);\r\n\r\n    setTimeout(() => {\r\n      setMessage('');\r\n    }, 3000);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchPoll = async () => {\r\n      try {\r\n        const response = await getPoll(\r\n          pollId\r\n        );\r\n\r\n        setPoll(response.poll);\r\n        setViewMode(response.alreadySubmitted);\r\n\r\n      } catch (error: any) {\r\n        showMessage('Failed to load poll.');\r\n      }\r\n    };\r\n  \r\n    fetchPoll();\r\n  }, [pollId, reloadTrigger])\r\n\r\n  const handleSubmitPoll = async () => {\r\n    if (!question || options.some(opt => !opt.name.trim())) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await submitPoll({\r\n        pollId: pollId,\r\n        pollOptionIds: selectedOptions.map(x => x.id)\r\n      });\r\n      console.log('Created poll:', response);\r\n\r\n      setViewMode(true)\r\n      setReloadTrigger(!reloadTrigger);\r\n\r\n      showMessage(`Poll submitted successfully!`)\r\n    } catch (error: any) {\r\n      console.error(error);\r\n      showMessage('Failed to submit poll.');\r\n    }\r\n  };\r\n\r\n  const handleCheckboxChange = (index: number) => {\r\n    setOptions(prevOptions => {\r\n      const selectedCount = prevOptions.filter(opt => opt.isChecked).length;\r\n      const isCurrentlyChecked = prevOptions[index].isChecked;\r\n\r\n      // Allow unchecking or checking if under limit\r\n      if (!isCurrentlyChecked && selectedCount >= Number(maxResponseOptions)) {\r\n        return prevOptions; // Don't allow checking more\r\n      }\r\n\r\n      // Toggle the selected item\r\n      return prevOptions.map((opt, i) =>\r\n        i === index ? { ...opt, isChecked: !opt.isChecked } : opt\r\n      );\r\n    });\r\n  };\r\n\r\n  const selectedOptions = options.filter(opt => opt.isChecked);\r\n\r\n  return (\r\n    <div className=\"max-w-md mx-auto p-4\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">{question}</h1>\r\n      <div className=\"space-y-3\">\r\n        {options.map((item, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"flex items-center justify-between p-3 border rounded hover:bg-gray-50\"\r\n          >\r\n            <div className=\"flex items-center space-x-3\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={item.isChecked}\r\n                disabled={viewMode || !item.isChecked && selectedOptions.length >= Number(maxResponseOptions)}\r\n                onChange={() => handleCheckboxChange(index)}\r\n                className=\"h-5 w-5 text-blue-600\"\r\n              />\r\n              <label className=\"text-gray-800\">{item.name}</label>\r\n            </div>\r\n            <span className=\"text-sm text-gray-500\">Votes: {item.votes ?? 0}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <br></br>\r\n\r\n      <button\r\n          className=\"w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700\"\r\n          onClick={handleSubmitPoll}\r\n          disabled={viewMode}\r\n        >\r\n          Submit\r\n        </button>\r\n\r\n        {message && (\r\n        <div className=\"mt-4 text-center text-sm font-semibold\">\r\n          <p className=\"text-green-500\">{message}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":["file:///S:/Projects/polling-next/polling-next/app/poll/submit/%5BpollId%5D/page.tsx"],"sourcesContent":["'use client'\r\n\r\nimport SubmitPollForm from \"@/components/SubmitPollForm\";\r\nimport { useParams } from \"next/navigation\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport default function Page() {\r\n    const params = useParams();\r\n    const pollId = Number(params.pollId);\r\n    \r\n    useEffect(() => {\r\n        if (!sessionStorage.getItem('pollUserId')) {\r\n            const id = crypto.randomUUID();\r\n            sessionStorage.setItem('pollUserId', id);\r\n        }    \r\n    })\r\n  \r\n    return <SubmitPollForm pollId={pollId}></SubmitPollForm>\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;;;AAJA;;;;AAMe,SAAS;;IACpB,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,SAAS,OAAO,OAAO,MAAM;IAEnC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;0BAAE;YACN,IAAI,CAAC,eAAe,OAAO,CAAC,eAAe;gBACvC,MAAM,KAAK,OAAO,UAAU;gBAC5B,eAAe,OAAO,CAAC,cAAc;YACzC;QACJ;;IAEA,qBAAO,6LAAC,gIAAA,CAAA,UAAc;QAAC,QAAQ;;;;;;AACnC;GAZwB;;QACL,qIAAA,CAAA,YAAS;;;KADJ","debugId":null}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":["file:///S:/Projects/polling-next/polling-next/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}