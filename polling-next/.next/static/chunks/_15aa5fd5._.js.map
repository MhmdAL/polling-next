{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///S:/Projects/polling-next/polling-next/lib/PollService.tsx"],"sourcesContent":["// lib/api.ts\r\n\r\nexport interface Poll {\r\n    id: string;\r\n    question: string;\r\n    maxResponseOptions: string;\r\n    options: PollOption[];  \r\n}\r\n\r\nexport interface PollOption {\r\n    id: string;\r\n    isChecked: boolean;\r\n    name: string;\r\n    votes: number;  \r\n}\r\n\r\nexport interface CreatePollRequest {\r\n    question: string;\r\n    maxResponseOptions: string;\r\n    options: PollOption[];\r\n}\r\n\r\nexport interface PollResponse {\r\n    alreadySubmitted: boolean;\r\n    poll: Poll;\r\n}\r\n\r\nexport async function createPoll(data: CreatePollRequest) {\r\n    const response = await fetch('http://localhost:5194/createPoll', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(data),\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Failed to create poll');\r\n    }\r\n  \r\n    return await response.json();\r\n}\r\n\r\nexport async function getPoll(pollId: number) : Promise<PollResponse> {\r\n    const response = await fetch(`http://localhost:5194/getPoll/${pollId}/${sessionStorage.getItem('pollUserId')}`, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Failed to create poll');\r\n    }\r\n  \r\n    return await response.json();\r\n}\r\n\r\nexport async function getPolls() : Promise<Poll[]> {\r\n    const response = await fetch(`http://localhost:5194/getPolls`, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Failed to create poll');\r\n    }\r\n  \r\n    return await response.json();\r\n}\r\n\r\nexport async function submitPoll(data: any) {\r\n    const response = await fetch(`http://localhost:5194/submitPoll/${sessionStorage.getItem('pollUserId')}`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(data)\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Failed to submit poll');\r\n    }\r\n  \r\n    return await response.json();\r\n}"],"names":[],"mappings":"AAAA,aAAa;;;;;;;AA2BN,eAAe,WAAW,IAAuB;IACpD,MAAM,WAAW,MAAM,MAAM,oCAAoC;QAC/D,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;QAC9C,MAAM,KAAK,SAAS,CAAC;IACvB;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,MAAM,SAAS,IAAI;AAC9B;AAEO,eAAe,QAAQ,MAAc;IACxC,MAAM,WAAW,MAAM,MAAM,CAAC,8BAA8B,EAAE,OAAO,CAAC,EAAE,eAAe,OAAO,CAAC,eAAe,EAAE;QAC9G,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;IAChD;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,MAAM,SAAS,IAAI;AAC9B;AAEO,eAAe;IAClB,MAAM,WAAW,MAAM,MAAM,CAAC,8BAA8B,CAAC,EAAE;QAC7D,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;IAChD;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,MAAM,SAAS,IAAI;AAC9B;AAEO,eAAe,WAAW,IAAS;IACtC,MAAM,WAAW,MAAM,MAAM,CAAC,iCAAiC,EAAE,eAAe,OAAO,CAAC,eAAe,EAAE;QACvG,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;QAC9C,MAAM,KAAK,SAAS,CAAC;IACvB;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,MAAM,SAAS,IAAI;AAC9B","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///S:/Projects/polling-next/polling-next/components/PollListing.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { createPoll, getPoll, getPolls, Poll, PollOption, submitPoll } from '@/lib/PollService';\r\nimport { useRouter } from 'next/navigation';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport default function PollListing() {\r\n  const [polls, setPolls] = useState<Poll[]>([]);\r\n  const [message, setMessage] = useState(''); \r\n\r\n  const setDefaultValues = () => {\r\n    setPolls([]);\r\n  }\r\n\r\n  const showMessage = (message: string) => {\r\n    setMessage(message);\r\n\r\n    setTimeout(() => {\r\n      setMessage('');\r\n    }, 3000);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchPolls = async () => {\r\n      try {\r\n        const response = await getPolls();\r\n\r\n        setPolls(response);\r\n\r\n      } catch (error: any) {\r\n        showMessage('Failed to load poll.');\r\n      }\r\n    };\r\n  \r\n    fetchPolls();\r\n  }, [])\r\n\r\n  const router = useRouter();\r\n\r\n  const navigateToPollSubmission = (item: Poll) => {\r\n    router.push(`/poll/submit/${item.id}`); // Navigate to submit page with poll ID\r\n  };\r\n\r\n\r\n  // const handleSubmitPoll = async () => {\r\n  //   if (!question || options.some(opt => !opt.name.trim())) {\r\n  //     return;\r\n  //   }\r\n\r\n  //   try {\r\n  //     const response = await submitPoll({\r\n  //       pollId: pollId,\r\n  //       pollOptionIds: selectedOptions.map(x => x.id)\r\n  //     });\r\n  //     console.log('Created poll:', response);\r\n\r\n  //     setViewMode(true)\r\n  //     setReloadTrigger(!reloadTrigger);\r\n\r\n  //     showMessage(`Poll submitted successfully!`)\r\n  //   } catch (error: any) {\r\n  //     console.error(error);\r\n  //     showMessage('Failed to submit poll.');\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <div className=\"max-w-md mx-auto p-4\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">Select Poll:</h1>\r\n      <div className=\"space-y-3\">\r\n        {polls.map((item, index) => (\r\n          <div\r\n            key={index}\r\n            onClick={(e) => navigateToPollSubmission(item)}\r\n            className=\"flex items-center justify-between p-3 border rounded hover:bg-gray-50 cursor-pointer\"\r\n          >\r\n            {/* <div className=\"flex items-center space-x-3\" > */}\r\n              <label className=\"text-gray-800 cursor-pointer\">{item.question}</label>\r\n            {/* </div> */}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n        {message && (\r\n        <div className=\"mt-4 text-center text-sm font-semibold\">\r\n          <p className=\"text-green-500\">{message}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;;;AAJA;;;;AAMe,SAAS;;IACtB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU,EAAE;IAC7C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,MAAM,mBAAmB;QACvB,SAAS,EAAE;IACb;IAEA,MAAM,cAAc,CAAC;QACnB,WAAW;QAEX,WAAW;YACT,WAAW;QACb,GAAG;IACL;IAEA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;iCAAE;YACR,MAAM;oDAAa;oBACjB,IAAI;wBACF,MAAM,WAAW,MAAM,CAAA,GAAA,sHAAA,CAAA,WAAQ,AAAD;wBAE9B,SAAS;oBAEX,EAAE,OAAO,OAAY;wBACnB,YAAY;oBACd;gBACF;;YAEA;QACF;gCAAG,EAAE;IAEL,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IAEvB,MAAM,2BAA2B,CAAC;QAChC,OAAO,IAAI,CAAC,CAAC,aAAa,EAAE,KAAK,EAAE,EAAE,GAAG,uCAAuC;IACjF;IAGA,yCAAyC;IACzC,8DAA8D;IAC9D,cAAc;IACd,MAAM;IAEN,UAAU;IACV,0CAA0C;IAC1C,wBAAwB;IACxB,sDAAsD;IACtD,UAAU;IACV,8CAA8C;IAE9C,wBAAwB;IACxB,wCAAwC;IAExC,kDAAkD;IAClD,2BAA2B;IAC3B,4BAA4B;IAC5B,6CAA6C;IAC7C,MAAM;IACN,KAAK;IAEL,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAA0B;;;;;;0BACxC,6LAAC;gBAAI,WAAU;0BACZ,MAAM,GAAG,CAAC,CAAC,MAAM,sBAChB,6LAAC;wBAEC,SAAS,CAAC,IAAM,yBAAyB;wBACzC,WAAU;kCAGR,cAAA,6LAAC;4BAAM,WAAU;sCAAgC,KAAK,QAAQ;;;;;;uBAL3D;;;;;;;;;;YAWR,yBACD,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAE,WAAU;8BAAkB;;;;;;;;;;;;;;;;;AAKzC;GApFwB;;QA+BP,qIAAA,CAAA,YAAS;;;KA/BF","debugId":null}},
    {"offset": {"line": 209, "column": 0}, "map": {"version":3,"sources":["file:///S:/Projects/polling-next/polling-next/app/poll/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport PollListing from '@/components/PollListing';\r\n\r\nexport default function HomePage() {\r\n  \r\n  return (\r\n    <PollListing></PollListing>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IAEtB,qBACE,6LAAC,6HAAA,CAAA,UAAW;;;;;AAEhB;KALwB","debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file:///S:/Projects/polling-next/polling-next/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}